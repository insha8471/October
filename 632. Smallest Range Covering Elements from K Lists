class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int k = nums.size();

        int[] arr = new int[k];
        int[] result = {-100001,100001};
    
        while(true) {
            int minEl = Integer.MAX_VALUE;
            int maxEl = Integer.MIN_VALUE;
            int minListIdx = 0;

            for(int i=0;i<k;i++) {
                int listIdx = i;
                int minElIdx = arr[i];
                int element = nums.get(listIdx).get(minElIdx);

                if(element < minEl) {
                    minEl = element;
                    minListIdx = listIdx;
                }        

                maxEl = Math.max(maxEl, element);
            }

            if(maxEl-minEl < result[1]-result[0]){
                result[0] = minEl;
                result[1] = maxEl;
            }

            int nextElIdx = arr[minListIdx]+1;
            if(nextElIdx >= nums.get(minListIdx).size()){
                break;
            }

            arr[minListIdx] = nextElIdx;
        
    }    
        return result; 
    }
}



class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int k = nums.size();

        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)-> a[0]-b[0]);
        int[] result = {-100001,100001};
        
        int maxEl = Integer.MIN_VALUE;
        for(int i=0;i<k;i++) {
            pq.add(new int[]{nums.get(i).get(0), 0, i});
            maxEl = Math.max(maxEl, nums.get(i).get(0));
        }

        while(!pq.isEmpty()) {
            int[] top        = pq.poll();
            int minEl      = top[0];
            int minElIdx   = top[1];
            int minListIdx = top[2];

            if(maxEl - minEl < result[1]-result[0]){
                result[0] = minEl;
                result[1] = maxEl;
            }

            int nextElIdx = minElIdx+1;
            if(nextElIdx < nums.get(minListIdx).size()) {
                pq.add(new int[]{nums.get(minListIdx).get(nextElIdx), nextElIdx, minListIdx});
                maxEl = Math.max(maxEl,nums.get(minListIdx).get(nextElIdx));
            }else{
                break;
            }
        }
        return result; 
    }
}
